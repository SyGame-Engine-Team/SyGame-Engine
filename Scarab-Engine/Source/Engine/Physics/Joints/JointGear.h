/////////////////////////////////////////////////////////////////////////////////
// File : Engine/Physics/Joints/JointGear.h
/////////////////////////////////////////////////////////////////////////////////
// Version : 1.0a
// Began Code : 29/05/2010
// Status : Alpha
// Portability : Any
/////////////////////////////////////////////////////////////////////////////////
// Description : Joints : Gear joint (angular coupling)
/////////////////////////////////////////////////////////////////////////////////
// Part of Scarab-Engine, licensed under the
// Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License
//   http://creativecommons.org/licenses/by-nc-nd/3.0/
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Known Bugs : Note that gear ratio should be properly computed from gear
//              radiuses for realistic rendering ...
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Header prelude
#ifndef SCARAB_ENGINE_PHYSICS_JOINTS_JOINTGEAR_H
#define SCARAB_ENGINE_PHYSICS_JOINTS_JOINTGEAR_H

/////////////////////////////////////////////////////////////////////////////////
// Includes
#include "JointConstraint.h"

/////////////////////////////////////////////////////////////////////////////////
// Constants definitions

/////////////////////////////////////////////////////////////////////////////////
// The JointGear class
class JointGear : public JointConstraint
{
public:
    JointGear( BodyNode * pBodyA, BodyNode * pBodyB, const Transform3 & vJointFrame, Scalar fRatio = 1.0f );
    JointGear( BodyNode * pBodyA, BodyNode * pBodyB, const Transform3 & vFrameInA, const Transform3 & vFrameInB, Scalar fRatio = 1.0f );
    virtual ~JointGear();

    // Type
    inline virtual JointConstraintType GetType() const;

    // Parameters
    inline Scalar GetRatio() const;
    inline Void SetRatio( Scalar fRatio );

    // Constraint evaluation
    virtual Void Evaluate( Scalar fInvTimeStep, Scalar fDefaultERP, Scalar fDefaultCFM );

protected:
    // Joint data
    Scalar m_fRatio;
};

/////////////////////////////////////////////////////////////////////////////////
// Backward Includes (Inlines & Templates)
#include "JointGear.inl"

/////////////////////////////////////////////////////////////////////////////////
// Header end
#endif // SCARAB_ENGINE_PHYSICS_JOINTS_JOINTGEAR_H



