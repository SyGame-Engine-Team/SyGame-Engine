/////////////////////////////////////////////////////////////////////////////////
// File : Engine/Rendering/2D/Resources/GPU2DLayer.cpp
/////////////////////////////////////////////////////////////////////////////////
// Version : 1.0a
// Began Code : 29/05/2010
// Status : Alpha
// Portability : Any
/////////////////////////////////////////////////////////////////////////////////
// Description : GPU 2D-Resource : Layers
/////////////////////////////////////////////////////////////////////////////////
// Part of Scarab-Engine, licensed under the
// Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License
//   http://creativecommons.org/licenses/by-nc-nd/3.0/
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Known Bugs : None.
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Includes
#include "GPU2DLayer.h"

#include "../GPU2DContext.h"

/////////////////////////////////////////////////////////////////////////////////
// GPU2DLayer implementation
GPU2DLayer::GPU2DLayer( GPU2DContext * pContext2D ):
    m_hDevice2DLayer( &(pContext2D->m_hDevice2DContext) )
{
    m_pContext2D = pContext2D;
}
GPU2DLayer::~GPU2DLayer()
{
    if ( IsBound() )
        UnBind();
}

Void GPU2DLayer::Bind( Float fInitialDIPWidth, Float fInitialDIPHeight )
{
    Assert( !(IsBound()) );

    m_hDevice2DLayer.Create( fInitialDIPWidth, fInitialDIPHeight );

    m_pContext2D->_RegisterLayer( this );
}
Void GPU2DLayer::UnBind()
{
    Assert( IsBound() );

    m_pContext2D->_UnRegisterLayer( this );
    
    m_hDevice2DLayer.Destroy();
}

