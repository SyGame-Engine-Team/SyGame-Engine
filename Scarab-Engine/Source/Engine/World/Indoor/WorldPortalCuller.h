/////////////////////////////////////////////////////////////////////////////////
// File : Engine/World/Indoor/WorldPortalCuller.h
/////////////////////////////////////////////////////////////////////////////////
// Version : 1.0a
// Began Code : 29/05/2010
// Status : Alpha
// Portability : Any
/////////////////////////////////////////////////////////////////////////////////
// Description : Adds unicity to VisibleGroups computed for portal systems
/////////////////////////////////////////////////////////////////////////////////
// Part of Scarab-Engine, licensed under the
// Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License
//   http://creativecommons.org/licenses/by-nc-nd/3.0/
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Known Bugs : none
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Header prelude
#ifndef SCARAB_ENGINE_WORLD_INDOOR_WORLDPORTALCULLER_H
#define SCARAB_ENGINE_WORLD_INDOOR_WORLDPORTALCULLER_H

/////////////////////////////////////////////////////////////////////////////////
// Includes
#include "../../../Lib/Datastruct/Table/TreeMap.h"

#include "../WorldCuller.h"

/////////////////////////////////////////////////////////////////////////////////
// Constants definitions

/////////////////////////////////////////////////////////////////////////////////
// The WorldPortalCuller class
class WorldPortalCuller : public WorldCuller
{
public:
    WorldPortalCuller();
    virtual ~WorldPortalCuller();

    // Getters
    inline UInt GetCount() const;

    inline Void EnumVisibles() const;
    inline WorldLeaf * EnumNextVisible() const;

    inline Void Clear();

    // Culling callback
    virtual Void OnVisibleNode( WorldLeaf * pVisibleLeaf );

private:
    typedef TreeMap<WorldLeaf*,UInt> UnicityMap;
    inline static Int _WorldLeafPtr_Compare( WorldLeaf * const & rLeft, WorldLeaf * const & rRight, Void * pUserData );

    UInt m_iCount;

    UnicityMap m_mapUniqueLeaves;
    mutable UnicityMap::Iterator m_itEnumerate;
};

/////////////////////////////////////////////////////////////////////////////////
// Backward Includes (Inlines & Templates)
#include "WorldPortalCuller.inl"

/////////////////////////////////////////////////////////////////////////////////
// Header end
#endif // SCARAB_ENGINE_WORLD_INDOOR_WORLDPORTALCULLER_H

