/////////////////////////////////////////////////////////////////////////////////
// File : EntryPoint/SimpleRPG/Gameplay/Items/ItemClasses.inl
/////////////////////////////////////////////////////////////////////////////////
// Version : 1.0a
// Began Code : 29/05/2010
// Status : Alpha
// Portability : Any
/////////////////////////////////////////////////////////////////////////////////
// Description : SimpleRPG, Gameplay, Items : ItemClasses
/////////////////////////////////////////////////////////////////////////////////
// Part of Scarab-Engine, licensed under the
// Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License
//   http://creativecommons.org/licenses/by-nc-nd/3.0/
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Known Bugs : None.
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// TrashItem implementation

/////////////////////////////////////////////////////////////////////////////////
// ConsummableItem implementation

/////////////////////////////////////////////////////////////////////////////////
// FoodItem implementation

/////////////////////////////////////////////////////////////////////////////////
// DrinkItem implementation

/////////////////////////////////////////////////////////////////////////////////
// PotionItem implementation

/////////////////////////////////////////////////////////////////////////////////
// ThrowableItem implementation

/////////////////////////////////////////////////////////////////////////////////
// EquipmentItem implementation
inline const Scalar * EquipmentItem::GetStatBonus() const {
    return m_arrStatBonus;
}

/////////////////////////////////////////////////////////////////////////////////
// ArmorItem implementation
inline Bool ArmorItem::IsArmor() const {
    return true;
}
inline Bool ArmorItem::IsJewel() const {
    return false;
}
inline Bool ArmorItem::IsWeapon() const {
    return false;
}

inline StatusEffect * ArmorItem::GetOnHitEffect() const {
    return m_pOnHitEffect;
}

/////////////////////////////////////////////////////////////////////////////////
// HeadItem implementation

/////////////////////////////////////////////////////////////////////////////////
// ChestItem implementation

/////////////////////////////////////////////////////////////////////////////////
// ShouldersItem implementation

/////////////////////////////////////////////////////////////////////////////////
// ArmsItem implementation

/////////////////////////////////////////////////////////////////////////////////
// WristsItem implementation

/////////////////////////////////////////////////////////////////////////////////
// HandsItem implementation

/////////////////////////////////////////////////////////////////////////////////
// LegsItem implementation

/////////////////////////////////////////////////////////////////////////////////
// FeetItem implementation

/////////////////////////////////////////////////////////////////////////////////
// JewelItem implementation
inline Bool JewelItem::IsArmor() const {
    return false;
}
inline Bool JewelItem::IsJewel() const {
    return true;
}
inline Bool JewelItem::IsWeapon() const {
    return false;
}

/////////////////////////////////////////////////////////////////////////////////
// NeckItem implementation

/////////////////////////////////////////////////////////////////////////////////
// BeltItem implementation

/////////////////////////////////////////////////////////////////////////////////
// RingItem implementation

/////////////////////////////////////////////////////////////////////////////////
// TrinketItem implementation

/////////////////////////////////////////////////////////////////////////////////
// WeaponItem implementation
inline Bool WeaponItem::IsArmor() const {
    return false;
}
inline Bool WeaponItem::IsJewel() const {
    return false;
}
inline Bool WeaponItem::IsWeapon() const {
    return true;
}

inline Scalar WeaponItem::GetAttackRange() const {
    return m_fAttackRange;
}

inline Scalar WeaponItem::GetAttackSpeed() const {
    return m_fAttackSpeed;
}
inline Scalar WeaponItem::GetAttackPeriod() const {
    return m_fAttackPeriod;
}

inline UInt WeaponItem::GetDamageMin() const {
    return m_iDamageMin;
}
inline UInt WeaponItem::GetDamageMax() const {
    return m_iDamageMax;
}

inline StatusEffectID WeaponItem::GetOnHitEffect() const {
    return m_idOnHitEffect;
}
inline Scalar WeaponItem::GetOnHitEffectScore() const {
    return m_fOnHitEffectScore;
}
inline UInt WeaponItem::GetOnHitEffectRank() const {
    return m_iOnHitEffectRank;
}
inline UInt WeaponItem::GetOnHitEffectStacks() const {
    return m_iOnHitEffectStacks;
}

inline StatusEffectID WeaponItem::GetOnCriticalEffect() const {
    return m_idOnCriticalEffect;
}
inline Scalar WeaponItem::GetOnCriticalEffectScore() const {
    return m_fOnCriticalEffectScore;
}
inline UInt WeaponItem::GetOnCriticalEffectRank() const {
    return m_iOnCriticalEffectRank;
}
inline UInt WeaponItem::GetOnCriticalEffectStacks() const {
    return m_iOnCriticalEffectStacks;
}

/////////////////////////////////////////////////////////////////////////////////
// WeaponRightItem implementation
inline Bool WeaponRightItem::IsTwoHanded() const {
    return m_bTwoHanded;
}

/////////////////////////////////////////////////////////////////////////////////
// WeaponLeftItem implementation

/////////////////////////////////////////////////////////////////////////////////
// WeaponThrowItem implementation

/////////////////////////////////////////////////////////////////////////////////
// QuestItem implementation
//inline QuestID QuestItem::GetParentQuest() const {
//    return m_idParentQuest;
//}

