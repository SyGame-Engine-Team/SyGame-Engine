/////////////////////////////////////////////////////////////////////////////////
// File : Lib/Math/Hash/SHA1.h
/////////////////////////////////////////////////////////////////////////////////
// Version : 1.0a
// Began Code : 29/05/2010
// Status : Alpha
// Portability : Any
/////////////////////////////////////////////////////////////////////////////////
// Description : Cryptographic-level SHA1 algorithm ...
/////////////////////////////////////////////////////////////////////////////////
// Part of Scarab-Engine, licensed under the
// Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License
//   http://creativecommons.org/licenses/by-nc-nd/3.0/
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Known Bugs : SHA1 provide asymmetric encryption, I'll add some
//              symmetric algorithm soon (DES, RC4, ...) and finally the famous
//              RSA which will require big integers support ...
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Header prelude
#ifndef SCARAB_LIB_MATH_HASH_SHA1_H
#define SCARAB_LIB_MATH_HASH_SHA1_H

/////////////////////////////////////////////////////////////////////////////////
// Includes
#include "../../../ThirdParty/System/Platform.h"

/////////////////////////////////////////////////////////////////////////////////
// Constants definitions
typedef Byte HashSHA1[20];

/////////////////////////////////////////////////////////////////////////////////
// The SHA1Hasher class
class SHA1Hasher
{
public:
	SHA1Hasher();
	~SHA1Hasher();

    inline Void Reset();
	Void Update(const Void * pData, DWord Size);
	Void GetHash(HashSHA1 pOut);

private:
    Void _Initialize();
	Void _MakePadding();
	DWord _Operation_F(Byte t, DWord B, DWord C, DWord D);
	DWord _Operation_K(Byte t);
	Void _SHA1Transform();

	Byte m_arrMsgBuffer[128];
	DWord m_iMsgSize, m_iBlokCount;
	DWord m_arrBlok[5];
};

/////////////////////////////////////////////////////////////////////////////////
// Backward Includes (Inlines & Templates)
#include "SHA1.inl"

/////////////////////////////////////////////////////////////////////////////////
// Header end
#endif // SCARAB_LIB_MATH_HASH_SHA1_H
